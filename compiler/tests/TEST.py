import os
print('========================================================================')
all_res = []
os.system('python test_binary.py > o')
os.system('python ../nano.py test_binary.an -sim > o1')
os.system('python ../nano.py test_binary.an -compile > o2')
res =  open('o','r').read() == open('o1','r').read() == open('o2','r').read()
all_res.append(res)
print('Testing binary ops -> ',bool(res))

os.system('python test_relational_equality.py > o')
os.system('python ../nano.py test_relational_equality.an -sim > o1')
os.system('python ../nano.py test_relational_equality.an -compile > o2')
res =  open('o','r').read() == open('o1','r').read() == open('o2','r').read()
all_res.append(res)
print('Testing relational equality ops -> ', bool(res))

os.system('python test_logical.py > o')
os.system('python ../nano.py test_logical.an -sim > o1')
os.system('python ../nano.py test_logical.an -compile > o2')
res =  open('o','r').read() == open('o1','r').read() == open('o2','r').read()
all_res.append(res)
print('Testing logical equality ops -> ', bool(res))

# os.system('python test_if_else1.py > o')
os.system('python ../nano.py test_if_else1.an -sim > o1')
os.system('python ../nano.py test_if_else1.an -compile > o2')
res =  open('o1','r').read() == open('o2','r').read()
all_res.append(res)
print('Testing if else 1  -> ',  bool(res))

# os.system('python test_logical.py > o')
os.system('python ../nano.py test_if_else2.an -sim > o1')
os.system('python ../nano.py test_if_else2.an -compile > o2')
res =  open('o1','r').read() == open('o2','r').read()
all_res.append(res)
print('Testing if else 2 -> ', bool(res))

os.system('python ../nano.py test_if_else3.an -sim > o1')
os.system('python ../nano.py test_if_else3.an -compile > o2')
res =   open('if_else_referance_out.o','r').read()==open('o1','r').read() == open('o2','r').read()
all_res.append(res)
print('Testing if else 3 -> ',  bool(res))

os.system('python ../nano.py test_while.an -sim > o1')
os.system('python ../nano.py test_while.an -compile > o2')
res = open('o1','r').read() == open('o2','r').read()
all_res.append(res)
print('Testing while  -> ',  bool(res))

print('\nPASSED\n ' if all(all_res) else '\nFAILED\n')
print('|| Cleaning up ||')
os.remove('out')
os.remove('out.o')
os.remove('o')
os.remove('o1')
os.remove('o2')
os.remove('compile.asm')
print('========================================================================')
